/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'
  id 'com.palantir.git-version' version '3.1.0'
}

def details = versionDetails()

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}

dependencies {
  implementation 'org.bspfsystems:simple-json:1.2.0'
  implementation 'org.xerial:sqlite-jdbc:3.49.0.0'
  implementation 'org.slf4j:slf4j-nop:2.1.0-alpha1'
  implementation 'org.eclipse.jetty:jetty-server:12.0.8'
  implementation 'org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.8'
  implementation 'org.eclipse.jetty.ee10.websocket:jetty-ee10-websocket-jetty-server:12.0.8'
  implementation 'io.nayuki:qrcodegen:1.8.0'
  implementation 'com.fathzer:javaluator:3.0.4'

  // Use JUnit Jupiter for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

  // This dependency is used by the application.
//  implementation 'com.google.guava:guava:30.1.1-jre'
//  implementation 'io.jsondb:jsondb-core:1.0.115-j11'
}

application {
  // Define the main class for the application.
  mainClass = 'FLLScorer.FLLScorer'
}

compileJava {
  options.release = 17
}

tasks.named('test') {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}

jar {
  manifest {
    attributes "Main-Class": "FLLScorer.FLLScorer"
    attributes "Implementation-Version": details.lastTag + 
      ((details.commitDistance == 0) ? "" : "-" + details.commitDistance +
        "-" + details.gitHash) + (details.isCleanTag ? "" : "-dirty")
  }

  duplicatesStrategy = "include"

  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}